# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    # see https://symfony.com/doc/4.1/console/request_context.html#configuring-the-request-context-globally
    router.request_context.host: 'localhost'
    router.request_context.scheme: 'https'
services:
    # default configuration for services in *this* file
    _defaults:
        public: true
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $env: '%kernel.environment%'
            $secret: '%kernel.secret%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/*.php'
            - '../src/Notification/'
            - '../src/Test/'
            - '../src/Message/Command'
            - '../src/Message/Event'
            - '../src/Kernel.php'
            - '../src/Validator/EntityExists.php'
            - '../src/Service/DataImport/File/FileImportContext.php'
            - '../src/Service/Security/Authorization/AuthorizationToken.php'
            - '../src/Service/Google/Ads/GoogleAdsClient.php'

    _instanceof:
        GraphQL\Type\Definition\Type:
            tags: [ graphql_type ]
        App\Service\DataImport\File\FileImportHandler:
            tags: [ file_import_handler ]

    graphql_queries:
        namespace: App\GraphQL\Query\
        resource: '../src/GraphQL/Query'
        tags: [ graphql_query ]

    graphql_mutations:
        namespace: App\GraphQL\Mutation\
        resource: '../src/GraphQL/Mutation'
        tags: [ graphql_mutation ]

    App\GraphQL\TypeRegistry:
        arguments: [!tagged_locator {tag: graphql_type}]

    App\GraphQL\Type\QueryType:
        arguments: [!tagged_iterator {tag: graphql_query}]

    App\GraphQL\Type\MutationType:
        arguments: [!tagged_iterator {tag: graphql_mutation}]

    App\Service\DataImport\File\FileImportService:
        arguments:
            $fileImportHandlers: !tagged_iterator {tag: file_import_handler}

    GraphQL\Upload\UploadType: ~
    MLL\GraphQLScalars\Date: ~
    MLL\GraphQLScalars\DateTime: ~

    App\Service\Security\ConnectedAccountCredentials\GoogleAdsCredentialsProvider:
        arguments:
            $developerToken: '%env(GOOGLE_ADS_DEVELOPER_TOKEN)%'
    App\Service\Google\GoogleOAuthClientCredentials:
        arguments: ['%env(GOOGLE_CLIENT_ID)%', '%env(GOOGLE_CLIENT_SECRET)%']

    Symfony\Component\Cache\Psr16Cache: ~
    Psr\SimpleCache\CacheInterface: '@Symfony\Component\Cache\Psr16Cache'

    League\Flysystem\FilesystemOperator: '@default.storage'
    League\Flysystem\FilesystemReader: '@League\Flysystem\FilesystemOperator'
    League\Flysystem\FilesystemWriter: '@League\Flysystem\FilesystemOperator'

    Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory: ~
    Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface: '@Symfony\Bridge\PsrHttpMessage\Factory\PsrHttpFactory'
    Symfony\Bridge\PsrHttpMessage\ArgumentValueResolver\PsrServerRequestResolver: ~

    kernel.event_listener.json_request_transformer:
        class: Qandidate\Common\Symfony\HttpKernel\EventListener\JsonRequestTransformerListener
        tags:
            - { name: kernel.event_listener, event: kernel.request, method: onKernelRequest, priority: 100 }

    App\Extension\Doctrine\MigrationEventSubscriber:
        tags:
            - { name: doctrine.event_subscriber, connection: default }

    Symfony\Component\Security\Http\Authentication\AuthenticatorManagerInterface: '@security.authenticator.manager.main'
    App\Service\Security\Account\AccountSwitcherStorage: '@App\Service\Security\Account\Storage\SessionStorage'

    Symfony\Component\Security\Core\User\UserProviderInterface:
        alias: 'security.user.provider.concrete.all_users'

    Symfony\Component\Uid\Command\GenerateUlidCommand: ~
    Symfony\Component\Uid\Command\GenerateUuidCommand: ~
    Symfony\Component\Uid\Command\InspectUlidCommand: ~
    Symfony\Component\Uid\Command\InspectUuidCommand: ~